import os;

# import custom settings & custom variables
Import('*');

lib_name = 'blue_sky';
tar_name = 'kernel';

# list of Boost libs used by kernel
kboost_libs = ['regex', 'thread', 'serialization', 'locale'];

# init stage
if build_kind == "init" :
	# query for reuired boost libs
	boost_require(kboost_libs);
	includes["bs"] = os.path.join(tar_plugin_dir, "include");
	includes["bs/tests"] = "#tests";
	Return();

# setup list of source files to compile
#kernel_cpp_list = files(["src"], recursive = False).sources;
kernel_cpp_list = [
	"src/assert.cpp",
	"src/defaults.cpp",
	"src/type_info.cpp",
	"src/plugin_descriptor.cpp",
	"src/objbase.cpp",
	"src/objbase_actor.cpp",
	"src/misc.cpp",
	"src/str_utils.cpp",
	"src/error.cpp",
	"src/lib_descriptor.cpp",
	"src/log.cpp",
	"src/main.cpp",
	"src/timetypes.cpp",
	"src/property.cpp",
	"src/propdict.cpp",

	"src/kernel/config_subsyst.cpp",
	"src/kernel/logging_subsyst.cpp",
	"src/kernel/plugins_discover.cpp",
	"src/kernel/plugins_subsyst.cpp",
	"src/kernel/radio_subsyst.cpp",
	"src/kernel/types_factory_subsyst.cpp",
	"src/kernel/kimpl.cpp",

	"src/kernel/errors.cpp",
	"src/kernel/tools.cpp",
	"src/kernel/config.cpp",
	"src/kernel/misc.cpp",
	"src/kernel/radio.cpp",
	"src/kernel/plugins.cpp",
	"src/kernel/types_factory.cpp",

	"src/compat/messaging.cpp",
	"src/compat/array.cpp",
	"src/compat/array_serialize.cpp",

	"src/serialize/base_types.cpp",
	"src/serialize/array.cpp",
	"src/serialize/link.cpp",
	"src/serialize/node.cpp",
	"src/serialize/python.cpp",
	"src/serialize/tree.cpp",
	"src/serialize/tree_fs_output.cpp",
	"src/serialize/tree_fs_input.cpp",
	"src/serialize/object_formatter.cpp",
	"src/serialize/objfrm_manager.cpp",

	"src/tree/engine.cpp",
	"src/tree/engine_impl.cpp",
	"src/tree/inode.cpp",
	"src/tree/link.cpp",
	"src/tree/link_actor.cpp",
	"src/tree/link_ack_behavior.cpp",
	"src/tree/link_actor_data.cpp",
	"src/tree/link_events.cpp",
	"src/tree/link_impl.cpp",
	"src/tree/nil_link.cpp",
	"src/tree/nil_node.cpp",
	"src/tree/hard_link.cpp",
	"src/tree/sym_link.cpp",
	"src/tree/fusion_link.cpp",
	"src/tree/fusion_link_actor.cpp",
	"src/tree/node.cpp",
	"src/tree/node_actor.cpp",
	"src/tree/node_ack_behavior.cpp",
	"src/tree/node_extraidx_actor.cpp",
	"src/tree/node_events.cpp",
	"src/tree/node_impl.cpp",
	"src/tree/tree.cpp",
	"src/tree/errors.cpp",
	"src/tree/context.cpp"
];
#print kernel_cpp_list;

py_kernel_cpp_list = [os.path.join('src', 'python', x) for x in [
	"py_common.cpp",
	"py_error.cpp",
	"py_log.cpp",
	"py_array.cpp",
	"py_main.cpp",
	"py_misc.cpp",
	"py_messaging.cpp",
	"py_objbase.cpp",
	"py_kernel.cpp",
	"py_link.cpp",
	"py_node.cpp",
	"py_tree.cpp"
]] + ["src/kernel/python_subsyst.cpp"];

# setup default build environment
base_env = custom_env.Clone();
base_env.AppendUnique(
	CPPDEFINES = ['BS_EXPORTING'],
	CPPPATH = ['#kernel/src'],
	LIBS = ['stdc++fs']
);
if base_env['platform'].startswith('lin') :
	base_env.Append(LIBS = ['dl']);

# are we building with python support?
if base_env['py'] == '1' :
	base_env.AppendUnique(
		CPPDEFINES = ['BSPY_EXPORTING']
	);
	kernel_cpp_list += py_kernel_cpp_list;

# link with Boost libraries
base_env.AppendUnique(LIBS = boost_get_libnames(kboost_libs, build_kind));

# actaully build target
bs_kernel = base_env.SharedLibrary(
	target = os.path.join(tar_exe_dir, lib_name),
	source = kernel_cpp_list
	#source = [os.path.join('src', x) for x in kernel_cpp_list]
);
Alias(tar_name, bs_kernel);
Export('bs_kernel');

# Install step
if base_env['install'] == '1':
	inst_tar = base_env.Install('$prefix', bs_kernel);
	Alias(tar_name, inst_tar);

